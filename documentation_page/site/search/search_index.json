{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a full-stack machine learning project. It includes the following: Multiple Flask apps Model training script Tests GitHub workflow for automatic testing A good project organization! Documentation Good dependency management. We are using pip-tools but other managers also work. Automatic deployments to AWS SageMaker and saving the models to S3","title":"Introduction"},{"location":"documentation/","text":"MkDocs The documentation of this project is built using mkdocs with the mkdocs-material theme. For full documentation visit mkdocs.org . Basic commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Updating the documentation Modify any of the markdown files and from the documentation_page/ folder run: mkdocs gh-deploy This will automatically build the docs and push them to the gh-pages branch. Do not modify the files directly in the github branch . GitHub will detect the branch and build a static documentation site for the project. NOTE Make sure to keep the mkdocs.yaml configuration file updated if you create new files.","title":"Documentation"},{"location":"documentation/#mkdocs","text":"The documentation of this project is built using mkdocs with the mkdocs-material theme. For full documentation visit mkdocs.org .","title":"MkDocs"},{"location":"documentation/#basic-commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Basic commands"},{"location":"documentation/#updating-the-documentation","text":"Modify any of the markdown files and from the documentation_page/ folder run: mkdocs gh-deploy This will automatically build the docs and push them to the gh-pages branch. Do not modify the files directly in the github branch . GitHub will detect the branch and build a static documentation site for the project. NOTE Make sure to keep the mkdocs.yaml configuration file updated if you create new files.","title":"Updating the documentation"},{"location":"models/","text":"Model description This model is a binar classifier. It will classify between ants and bees . The training data includes 10 images of each class for training and 2 images of each class for validation #bigdata. Jokes apart, this is done on purpose to make it easier to experiment. Once you feel confortable with your workflow, you can try with bigger datasets. Remeber to change the model if you need to! (mostly the last fully-connected layer) Remember to always start with good baselines For example. In computer vision a resnet18 is a good starting point. In text classification an LSTM may be a good starting point.","title":"Models"},{"location":"models/#model-description","text":"This model is a binar classifier. It will classify between ants and bees . The training data includes 10 images of each class for training and 2 images of each class for validation #bigdata. Jokes apart, this is done on purpose to make it easier to experiment. Once you feel confortable with your workflow, you can try with bigger datasets. Remeber to change the model if you need to! (mostly the last fully-connected layer)","title":"Model description"},{"location":"models/#remember-to-always-start-with-good-baselines","text":"For example. In computer vision a resnet18 is a good starting point. In text classification an LSTM may be a good starting point.","title":"Remember to always start with good baselines"},{"location":"running/","text":"How to run the model as a separate service This app is designed to be run inside Flask. The machine learning model is running in service.py . The main app is inside app.py . If you run any of the apps in a different port, check the python files and modify them accordingly. To run the apps use: FLASK_ENV=development FLASK_APP=service.py flask run --port 5005 FLASK_ENV=development FLASK_APP=app.py flask run --port 5002 Now you can navigate to 127.0.0.1:5002 and use your app. The main app.py calls service.py to do the predictions. At the top fo the Flask apps there are a few configuration variables. They are mostly about the paths to find the files we need and the name of the files (for example the weights of the best performing model). Modify those if you change the project structure.","title":"Running the apps"},{"location":"running/#how-to-run-the-model-as-a-separate-service","text":"This app is designed to be run inside Flask. The machine learning model is running in service.py . The main app is inside app.py . If you run any of the apps in a different port, check the python files and modify them accordingly. To run the apps use: FLASK_ENV=development FLASK_APP=service.py flask run --port 5005 FLASK_ENV=development FLASK_APP=app.py flask run --port 5002 Now you can navigate to 127.0.0.1:5002 and use your app. The main app.py calls service.py to do the predictions. At the top fo the Flask apps there are a few configuration variables. They are mostly about the paths to find the files we need and the name of the files (for example the weights of the best performing model). Modify those if you change the project structure.","title":"How to run the model as a separate service"},{"location":"training/","text":"Here's an example to train a new model. In order to run the training script use: python3 train.py --download-data python3 train.py --train --epochs 2 --optmizer adam When the training finishes, the best model weights will be saved to a file called best_model.pth . NOTE : The train.py script is still missing some features. Feel free to implement them: Choosing the folder to save the downloaded data Choosing the name and folder to save the best model Whatever comes to your mind!","title":"Training"}]}